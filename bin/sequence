#!/usr/bin/env ruby

require_relative '../lib/sequence'
require_relative '../lib/kmer'
require_relative '../lib/nucleotide'
require_relative '../lib/probe'
require_relative '../lib/chip'
require_relative '../lib/binary_chip'
require_relative '../lib/binary_sequencer'

if ARGV.size != 2
  puts "USAGE: sequence SEQUENCE_LENGTH KMER_LENGTH"
  exit
end

sequence_length = ARGV[0].to_i
kmer_length = ARGV[1].to_i
sequence = Sequence.random(sequence_length)
chip = BinaryChip.new(kmer_length)

chip.analyze(sequence)

puts "SEQUENCE: #{sequence}"
puts "SPECTRUM:"

chip.spectrum.each do |probe|
  puts "* #{probe.kmer} - count: #{probe.more? ? 'more' : probe.count}"
end

anchor = sequence.first(kmer_length)
sequencer = BinarySequencer.new(chip, anchor, sequence.length)

puts "SEQUENCER RESULTS:"

sequencer.results.each do |result|
  puts "* #{result}"
end
